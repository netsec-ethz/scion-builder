stages:
  - pre-build
  - build
  - test-1
  - test-2
  - test-3
  - deploy
  - post-deploy

connectivity-check:
  stage: pre-build
  image: busybox
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ping github.com -c1
    - nc -vz packages.netsec.inf.ethz.ch 22
    - nc -vz packages-test.netsec.inf.ethz.ch 22

go-deps-population:
  stage: pre-build
  image: $CI_DOCKER_IMAGE
  retry:
    max: 2
    when: runner_system_failure
  # (kmateusz) Using artifacts instead of cache due to the lack of sticky runners and shared cache in our GitLab CI.
  # That means if by any chance next job hits on a different runner, it will not have access to the cache populated
  # here and will fail.
  artifacts:
    paths:
      - scion/
    expire_in: 1 hour
  script:
    # Prepare operating system
    - export DEBIAN_FRONTEND=noninteractive
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    - apt update && apt install -y apt-transport-https ca-certificates rpm git wget curl unzip gcc file python
    # Install golang
    - curl -fSL "https://dl.google.com/go/go$CI_GOLANG_VERSION.linux-amd64.tar.gz" | tar xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Clone SCION source code
    - git clone $CI_SCION_REPO -b $CI_SCION_BRANCH scion
    - mkdir -p $HOME/go/src/github.com/scionproto/
    - ln -s $(pwd)/scion /root/go/src/github.com/scionproto/
    # Clone SCIONLab source code
    - git clone $CI_SCIONLAB_REPO -b $CI_SCIONLAB_BRANCH scionlab
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/
    - ln -s $(pwd)/scionlab /root/go/src/github.com/netsec-ethz/
    # Override some files from upstream SCION
    - pushd scion
    - if [ ! -z "$(ls ../patches)" ]; then ls -l ../patches; for i in ../patches/*.patch; do git apply $i --verbose; done; fi
    - popd
    # Set variables in BUILD.bazel
    - source ./RELEASE
    - sed -i "s/CI_PKG_VERSION_SCION_SYSTEMD_WRAPPER/$PKG_VERSION_SCION_SYSTEMD_WRAPPER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_BORDER_ROUTER/$PKG_VERSION_SCION_BORDER_ROUTER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_BEACON_SERVER/$PKG_VERSION_SCION_BEACON_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_CERTIFICATE_SERVER/$PKG_VERSION_SCION_CERTIFICATE_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_PATH_SERVER/$PKG_VERSION_SCION_PATH_SERVER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_DAEMON/$PKG_VERSION_SCION_DAEMON/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_DISPATCHER/$PKG_VERSION_SCION_DISPATCHER/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCION_TOOLS/$PKG_VERSION_SCION_TOOLS/g" BUILD.bazel
    - sed -i "s/CI_PKG_VERSION_SCIONLAB/$PKG_VERSION_SCIONLAB/g" BUILD.bazel
    - cp BUILD.bazel scion/BUILD.bazel
    # Set variables in RPM specfile
    - sed -i "s/CI_PKG_VERSION_SCION_BORDER_ROUTER/$PKG_VERSION_SCION_BORDER_ROUTER/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_BEACON_SERVER/$PKG_VERSION_SCION_BEACON_SERVER/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_CERTIFICATE_SERVER/$PKG_VERSION_SCION_CERTIFICATE_SERVER/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_PATH_SERVER/$PKG_VERSION_SCION_PATH_SERVER/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_DAEMON/$PKG_VERSION_SCION_DAEMON/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_DISPATCHER/$PKG_VERSION_SCION_DISPATCHER/g" rhel/scionlab.spec
    - sed -i "s/CI_PKG_VERSION_SCION_TOOLS/$PKG_VERSION_SCION_TOOLS/g" rhel/scionlab.spec
    # Copy SCIONLab automatic configuration script into SCION codebase
    - cp scionlab/scionlab/hostfiles/scionlab-config scion/scionlab-config
    # Copy build-related directories into SCION codebase
    - cp -r debian scion
    - cp -r rhel scion
    - cp -r systemd scion
    - cp scion-systemd-wrapper scion
    # Place hashes of git repos in the output for auditing
    - cd scion && git log -1
    - cd ../scionlab && git log -1

.build-script: &build-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    # Prepare operating system
    - export DEBIAN_FRONTEND=noninteractive
    - echo "Acquire::By-Hash \"yes\"; " > /etc/apt/apt.conf.d/01byhash
    - apt update && apt install -y apt-transport-https ca-certificates rpm git wget curl unzip gcc file python
    # Install golang
    - curl -fSL "https://dl.google.com/go/go$CI_GOLANG_VERSION.linux-amd64.tar.gz" | tar xzC /usr/local
    - ln -f -s /usr/local/go/bin/* /usr/bin/
    # Install multiplatform toolchains
    - apt install -y gcc-multilib
    - "apt install -y \
      libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi binutils-arm-linux-gnueabihf binutils-arm-linux-gnueabi \
      libc6-arm64-cross libc6-dev-arm64-cross gcc-aarch64-linux-gnu \
      libgcc-7-dev-i386-cross libgcc-7-dev libc6-dev libc6-dev-i386 libc6-i386-cross libc6-dev-i386-cross linux-libc-dev-i386-cross"
    # Hack for linux kernels for i386
    - ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/asm
    # Install selected release of BAZEL
    - wget https://github.com/bazelbuild/bazel/releases/download/$CI_BAZEL_VERSION/bazel-$CI_BAZEL_VERSION-installer-linux-x86_64.sh -O bazel_install_script.sh
    - bash bazel_install_script.sh
    # Create symlinks for Go
    - mkdir -p $HOME/go/src/github.com/scionproto/
    - ln -s $(pwd)/scion /root/go/src/github.com/scionproto/
    - mkdir -p $HOME/go/src/github.com/netsec-ethz/
    - ln -s $(pwd)/scionlab /root/go/src/github.com/netsec-ethz/
    # Install SCION defined dependencies
    - apt install -y $(grep -vE "^\s*#" scion/env/debian/pkgs.txt | tr "\n" " ")
    # Prepare GO environment
    - export CGO_ENABLED=1
    - export GOOS=linux
    - export CC=$CI_CC && echo $CC
    - export GOARCH=$CI_GOARCH && echo $GOARCH
    # Build SCION binaries
    - cd $HOME/go/src/github.com/scionproto/scion/bin
    - go build ../go/border/
    - go build ../go/beacon_srv/
    - go build ../go/cert_srv/
    - go build ../go/path_srv/
    - go build ../go/sciond/
    - go build ../go/godispatcher/
    - go build ../go/tools/scmp/
    - go build ../go/tools/showpaths/
    # Build SCION packages
    - cd $HOME/go/src/github.com/scionproto/scion
    - sed -i "s/CI_TARGET_ARCHITECTURE/$CI_TARGET_ARCHITECTURE/g" BUILD.bazel
    - bazel build //:scion-systemd-wrapper-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-border-router-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-beacon-server-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-certificate-server-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-path-server-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-daemon-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-dispatcher-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scion-tools-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    - bazel build //:scionlab-$CI_TARGET_PLATFORM --workspace_status_command=./tools/bazel-build-env
    # Prepare packages to shipment
    - mkdir ../output-$CI_TARGET_ARCHITECTURE
    - cp bazel-bin/*$CI_TARGET_ARCHITECTURE.$CI_TARGET_PLATFORM ../output-$CI_TARGET_ARCHITECTURE

all-deb-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_PLATFORM: deb
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
  <<: *build-script
  artifacts:
    paths:
    - output-amd64/
    expire_in: 1 hour

all-rpm-amd64:
  stage: build
  image: $CI_DOCKER_IMAGE
  variables:
    CI_TARGET_PLATFORM: rpm
    CI_TARGET_ARCHITECTURE: amd64
    CI_GOARCH: amd64
    CI_CC: gcc
  <<: *build-script
  artifacts:
    paths:
      - output-amd64/
    expire_in: 1 hour

all-deb-i386:
  stage: build
  image: $CI_DOCKER_IMAGE
  except:
    - triggers
  variables:
    CI_TARGET_PLATFORM: deb
    CI_TARGET_ARCHITECTURE: i386
    CI_GOARCH: 386
    CI_CC: gcc
  <<: *build-script
  artifacts:
    paths:
      - output-i386/
    expire_in: 1 hour

all-deb-arm64:
  stage: build
  image: $CI_DOCKER_IMAGE
  except:
    - triggers
  variables:
    CI_TARGET_PLATFORM: deb
    CI_TARGET_ARCHITECTURE: arm64
    CI_GOARCH: arm64
    CI_CC: aarch64-linux-gnu-gcc
  <<: *build-script
  artifacts:
    paths:
      - output-arm64/
    expire_in: 1 hour

all-deb-armhf:
  stage: build
  image: $CI_DOCKER_IMAGE
  except:
    - triggers
  variables:
    CI_TARGET_PLATFORM: deb
    CI_TARGET_ARCHITECTURE: armhf
    CI_GOARCH: arm
    CI_CC: arm-linux-gnueabihf-gcc
  <<: *build-script
  artifacts:
    paths:
      - output-armhf/
    expire_in: 1 hour

.test-deb-script: &test-deb-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    # Test installation
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    # Test system after the installation
    - id scion
    - getent group scion
    - stat -c "%U %G" /var/log/scion | grep "scion scion"
    - stat -c "%U %G" /var/lib/scion | grep "scion scion"
    - stat -c "%U %G" /etc/scion | grep "scion scion"
    - ls /lib/systemd/system/$CI_PACKAGE*.service
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    # Test removal
    - dpkg --purge $CI_PACKAGE
    # Test system after the removal
    - id scion
    - getent group scion
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"
    - "[[ $(ls /lib/systemd/system/$CI_PACKAGE*.service | wc -l) -eq 0  ]]"

.test-rpm-script: &test-rpm-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    # Test installation
    - rpm -i output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper*$CI_TARGET_ARCHITECTURE.rpm
    - rpm -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    # Test system after the installation
    - id scion
    - getent group scion
    - stat -c "%U %G" /var/log/scion | grep "scion scion"
    - stat -c "%U %G" /var/lib/scion | grep "scion scion"
    - stat -c "%U %G" /etc/scion | grep "scion scion"
    - ls /lib/systemd/system/$CI_PACKAGE*.service
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    # Test removal
    - rpm -e $CI_PACKAGE
    # Test system after the removal
    - id scion
    - getent group scion
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"
    - "[[ $(ls /lib/systemd/system/$CI_PACKAGE*.service | wc -l) -eq 0  ]]"

.test-systemd-wrapper-deb-script: &test-systemd-wrapper-deb-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - dpkg --purge $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

.test-systemd-wrapper-rpm-script: &test-systemd-wrapper-rpm-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    - rpm -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - rpm -e $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

.test-scion-tools-deb-script: &test-scion-tools-deb-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion-daemon*$CI_TARGET_ARCHITECTURE.deb output-$CI_TARGET_ARCHITECTURE/scion-dispatcher*$CI_TARGET_ARCHITECTURE.deb output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.deb
    - for CI_BINARY_NAME in $CI_BINARIES; do ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755; done
    - dpkg --purge $CI_PACKAGE
    - for CI_BINARY_NAME in $CI_BINARIES; do [[ ! -f /usr/bin/$CI_BINARY_NAME ]]; done

.test-scion-tools-rpm-script: &test-scion-tools-rpm-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - ls -l output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    - rpm -i output-$CI_TARGET_ARCHITECTURE/scion-daemon*$CI_TARGET_ARCHITECTURE.rpm output-$CI_TARGET_ARCHITECTURE/scion-dispatcher*$CI_TARGET_ARCHITECTURE.rpm output-$CI_TARGET_ARCHITECTURE/scion-systemd-wrapper*$CI_TARGET_ARCHITECTURE.rpm
    - rpm -i output-$CI_TARGET_ARCHITECTURE/$CI_PACKAGE*$CI_TARGET_ARCHITECTURE.rpm
    - for CI_BINARY_NAME in $CI_BINARIES; do ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755; done
    - rpm -e $CI_PACKAGE
    - for CI_BINARY_NAME in $CI_BINARIES; do [[ ! -f /usr/bin/$CI_BINARY_NAME ]]; done

.test-scionlab-deb-script: &test-scionlab-deb-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - apt update && apt install -y openvpn openssl python3
    - ls -l output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.deb
    - dpkg -i output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.deb
    - ls /lib/systemd/system/scionlab.target
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - dpkg --purge $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

.test-scionlab-rpm-script: &test-scionlab-rpm-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - yum install -y openvpn openssl python3
    - ls -l output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.rpm
    - rpm -i output-$CI_TARGET_ARCHITECTURE/scion*$CI_TARGET_ARCHITECTURE.rpm
    - ls /lib/systemd/system/scionlab.target
    - ls /usr/bin/$CI_BINARY_NAME && stat --format '%a' /usr/bin/$CI_BINARY_NAME | grep 755
    - rpm -e $CI_PACKAGE
    - "[[ ! -f /usr/bin/$CI_BINARY_NAME ]]"

systemd-wrapper-ubuntu-18.04-amd64-test:
  stage: test-1
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  <<: *test-systemd-wrapper-deb-script

#systemd-wrapper-debian-10-amd64-test:
#  stage: test-1
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-systemd-wrapper
#    CI_BINARY_NAME: scion-systemd-wrapper
#  <<: *test-systemd-wrapper-deb-script

systemd-wrapper-centos-7-amd64-test:
  stage: test-1
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-systemd-wrapper
    CI_BINARY_NAME: scion-systemd-wrapper
  <<: *test-systemd-wrapper-rpm-script

scion-tools-ubuntu-18.04-amd64-test:
  stage: test-1
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "scmp showpaths"
  <<: *test-scion-tools-deb-script

#scion-tools-debian-10-amd64-test:
#  stage: test-1
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-tools
#    CI_BINARIES: "scmp showpaths"
#  <<: *test-scion-tools-deb-script

scion-tools-centos-7-amd64-test:
  stage: test-1
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-tools
    CI_BINARIES: "scmp showpaths"
  <<: *test-scion-tools-rpm-script

border-router-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-deb-script

#border-router-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-border-router
#    CI_BINARY_NAME: border
#  <<: *test-deb-script

border-router-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-border-router
    CI_BINARY_NAME: border
  <<: *test-rpm-script

beacon-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-deb-script

#beacon-server-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-beacon-server
#    CI_BINARY_NAME: beacon_srv
#  <<: *test-deb-script

beacon-server-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-beacon-server
    CI_BINARY_NAME: beacon_srv
  <<: *test-rpm-script

certificate-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-deb-script

#certificate-server-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-certificate-server
#    CI_BINARY_NAME: cert_srv
#  <<: *test-deb-script

certificate-server-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-certificate-server
    CI_BINARY_NAME: cert_srv
  <<: *test-rpm-script

path-server-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-deb-script

#path-server-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-path-server
#    CI_BINARY_NAME: path_srv
#  <<: *test-deb-script

path-server-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-path-server
    CI_BINARY_NAME: path_srv
  <<: *test-rpm-script

daemon-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-deb-script

#daemon-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-daemon
#    CI_BINARY_NAME: sciond
#  <<: *test-deb-script

daemon-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-daemon
    CI_BINARY_NAME: sciond
  <<: *test-rpm-script

dispatcher-ubuntu-18.04-amd64-test:
  stage: test-2
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-deb-script

#dispatcher-debian-10-amd64-test:
#  stage: test-2
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scion-dispatcher
#    CI_BINARY_NAME: godispatcher
#  <<: *test-deb-script

dispatcher-centos-7-amd64-test:
  stage: test-2
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scion-dispatcher
    CI_BINARY_NAME: godispatcher
  <<: *test-rpm-script

scionlab-ubuntu-18.04-amd64-test:
  stage: test-3
  image: ubuntu:18.04
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scionlab
    CI_BINARY_NAME: scionlab-config
  <<: *test-scionlab-deb-script

#scionlab-debian-10-amd64-test:
#  stage: test-3
#  image: debian:buster
#  variables:
#    CI_TARGET_ARCHITECTURE: amd64
#    CI_PACKAGE: scionlab
#    CI_BINARY_NAME: scionlab-config
#  <<: *test-scionlab-deb-script

scionlab-centos-7-amd64-test:
  stage: test-3
  image: centos:7
  variables:
    CI_TARGET_ARCHITECTURE: amd64
    CI_PACKAGE: scionlab
    CI_BINARY_NAME: scionlab-config
  <<: *test-scionlab-rpm-script

.deb-deploy-script: &deb-deploy-script
  retry:
    max: 2
    when: runner_system_failure
  before_script:
    - 'which ssh-agent || ( apt update && apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$CI_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    #
    # Copy (only) new versions of .debs to package repomachine and include them into the repository
    # We skip existing versions of .debs because reprepro will complain loudly
    # if the hashes don't match and our builds don't seem be reproducible enough.
    #
    # Note: the dance with only copying the new versions looks like a pointless optimisation;
    #       this could also be done entirely on the repo machine, but simply
    #       the shell escaping gets (even more) hairy.
    - repo_ssh_target=reprepro@$CI_PACKAGE_REPO
    - tmpdir=$(ssh -q $repo_ssh_target "mktemp -d --suffix .debs")
    - existing_debs=$(ssh -q $repo_ssh_target reprepro -b /home/reprepro/reprepro --list-format \''${$basename}\n'\' list all)
    - debs_to_deploy=$(ls output-*/*.deb | grep -vF "$existing_debs" || true)
    - debs_to_skip=$(ls output-*/*.deb | grep -F "$existing_debs" || true)
    - if [ -n "$debs_to_skip" ]; then
    -   echo "Skipping existing *.deb:"
    -   echo "$debs_to_skip"
    - fi
    - scp -v $debs_to_deploy $repo_ssh_target:$tmpdir
    - ssh -q $repo_ssh_target 'set -x; for deb in '$tmpdir'/*.deb; do reprepro -b /home/reprepro/reprepro includedeb all $deb; done'
    - ssh -q $repo_ssh_target 'rm -r ' $tmpdir

all-deb-staging-deploy:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  only:
    - /^staging.*$/
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages-test.netsec.inf.ethz.ch
  <<: *deb-deploy-script

all-deb-prod-deploy:
  stage: deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages.netsec.inf.ethz.ch
  <<: *deb-deploy-script

.test-deb-deploy-script: &test-deb-deploy-script
  retry:
    max: 2
    when: runner_system_failure
  script:
    - apt update && apt install -y apt-transport-https ca-certificates
    - echo "deb [trusted=yes] https://$CI_PACKAGE_REPO/debian all main" >> /etc/apt/sources.list && apt update
    # Loop over all packages, check whether expected version is available from repo.
    #
    # Get package names and versions by mangling RELEASE file such that e.g. the line
    #    export PKG_VERSION_SCION_SYSTEMD_WRAPPERR=1.0.3
    # becomes
    #    scion-systemd-wrapper=1.0.3
    #
    - sed -n '/^export PKG_VERSION_/{s///;s/.*/\L\0/;y/_/-/;p}' ./RELEASE | while read pkg_and_version; do
    -   apt show "$pkg_and_version"
    - done

all-deb-staging-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - /^staging.*$/
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages-test.netsec.inf.ethz.ch
  <<: *test-deb-deploy-script

all-deb-prod-deploy-test:
  stage: post-deploy
  image: $CI_DOCKER_IMAGE
  only:
    - master
  except:
    - triggers
  variables:
    CI_PACKAGE_REPO: packages.netsec.inf.ethz.ch
  <<: *test-deb-deploy-script
